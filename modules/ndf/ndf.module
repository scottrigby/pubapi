<?php

/**
 * @file
 * Hook implementations, and API functions for Nuke Drupal Frontend module.
 */

/**
 * Implements hook_menu_alter().
 */
function ndf_menu_alter(&$items) {
  $allowed_paths = variable_get('ndf_allowed_paths', ndf_allowed_paths());
  // Separate with \n for drupal_match_path().
  $pages = implode(PHP_EOL, $allowed_paths);

  // Match each menu item path.
  foreach (array_keys($items) as $path) {
    // Don't bother converting to lowercase, since we're comparing a white list
    // of internal path patterns to those set by hook_menu().
    if (!drupal_match_path($path, $pages)) {
      $items[$path]['access callback'] = FALSE;
    }
  }

  // Redirects from frontend entity to edit form. This is so we don't have to
  // modify every Drupal admin form that links to a frontend display - such as
  // node_admin_content() - and also so we don't need to explicitly white list
  // every entity path but their frontend URI callback paths.
  $entity_items = array(
    'node' => array(
      'uri' => 'node/%node/view',
      'base' => 'node/%node',
      'position' => 1,
      'redirect' => 'node/%id/edit',
    ),
    'file' => array(
      'uri' => 'file/%file/view',
      'base' => 'file/%file',
      'position' => 1,
      'redirect' => 'file/%id/edit',
    ),
    'taxonomy_term' => array(
      'uri' => 'taxonomy/term/%taxonomy_term/view',
      'base' => 'taxonomy/term/%taxonomy_term',
      'position' => 2,
      'redirect' => 'taxonomy/term/%id/edit',
    ),
  );
  foreach ($entity_items as $entity_type => $item) {
    if (isset($items[$item['uri']]) && $items[$item['base']]) {
      $items[$item['uri']]['access callback'] = FALSE;
      $items[$item['base']]['page callback'] = 'ndf_entity_redirect';
      $items[$item['base']]['page arguments'] = array($item['position'], $entity_type, $item['redirect']);
    }
  }
}

/**
 * Menu callback: Redirects an entity view page to another page.
 *
 * @param object $entity
 *   The loaded entity.
 * @param string $entity_type
 *   The entity type.
 * @param string $redirect_pattern
 *   A string representing the redirect path pattern. May include tokens:
 *   - %entity_id: The entity ID.
 *   The reason for this is in Drupal 7 there no generic edit uri, equivalent to
 *   the display 'uri callback' in hook_entity_info().
 */
function ndf_entity_redirect($entity, $entity_type, $redirect_pattern) {
  list($id, $rid, $bundle) = entity_extract_ids($entity_type, $entity);
  $path = str_replace('%id', $id, $redirect_pattern);

  if (!isset($path)) {
    $path = variable_get('site_frontpage');

    // Give admins a friendly message, explaining what happened. Anyone else
    // should 403 anyway.
    if (user_access('access administration pages')) {
      drupal_set_message(t('There is no support for viewing this entity.'));
    }
  }

  drupal_goto($path);
}

/**
 * Implements hook_boot().
 */
function ndf_boot() {
  // Change variables here rather than on hook_install(), hook_uninstall(),
  // hook_enable(), and hook_disable().
  global $conf;
  drupal_load('module', 'user');
  $conf['site_frontpage'] = user_access('access administration pages') ? 'admin' : 'user';
}

/**
 * Defines a default white list of allowed paths to be spared.
 *
 * This can be overridden by the Drupal variable 'ndf_allowed_paths'.
 *
 * @return array
 *   A list of internal drupal path patterns, suitable for the $patterns param
 *   of drupal_match_path(). Invocations of this hook will explode the array
 *   with '\n', so just return an array.
 *
 * @see ndf_menu_alter()
 */
function ndf_allowed_paths() {
  $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
  return array(
    // Base core admin paths.
    'admin',
    'admin/compact',
    'admin/tasks',
    'admin/index',
    // Applicable core admin sections.
    'admin/content*',
    'admin/structure*',
    'admin/people*',
    'admin/modules*',
    'admin/config*',
    'user*',
    'system*',
    // Allow all JS paths for now.
    'js*',
    // For fun, support contrib admin_menu.module paths.
    'admin_menu*',

    // Entity paths.
    'node*',
    'taxonomy*',
    // File (core) and File entity contrib module.
    'file*',
    // Include public files directory path.
    $directory_path . '*',
  );
}

/**
 * Defines a default black list of frontend modules to be disabled on install.
 *
 * This can be overridden by the Drupal variable 'ndf_disable_module_list'.
 *
 * @return array
 *   A list of additional module names to be disabled.
 *
 * @see ndf_install()
 */
function ndf_disable_module_list() {
  // List core modules that are safe to disable.
  return array(
    'aggregator',
    'blog',
    'block',
    'color',
    'comment',
    'contact',
    'contextual',
    // Investigate why we can't disable this (apart from required = TRUE).
    //'filter',
    'forum',
    'help',
    'menu',
    'overlay',
    'path',
    // Just because it's evil.
    'php',
    'poll',
    'profile',
    'rdf',
    // The administrative use-case for this is handled by good admin screens.
    'search',
    'shortcut',
    'tracker',
  );
}
