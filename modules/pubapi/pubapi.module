<?php

/**
 * Implements hook_restws_resource_info().
 *
 * Adds a mapping layer between Publisher API and entity types.
 *
 * @return array
 *   In addition to the return value of hook_restws_resource_info(), we also
 *   include:
 *   - properties: See the return value of hook_entity_property_info()
 */
function pubapi_restws_resource_info() {
  $result = array();
  foreach (pubapi_get_structure() as $type => $info) {
    $result[$type] = array(
      'label' => $info['label'],
      'class' => 'PubApiResourceController',
      'properties' => $info['properties'],
    );
  }
  return $result;
}

/**
 * Implements hook_restws_response_alter().
 *
 * @see RestWSBaseFormat::viewResource
 *
 * @todo Find out why the method used to override entityreference fields in
 *   PubApiResourceController::objectLoad isn't working for file fields (when
 *   file_entity module is enabled) - instead the return value of that function
 *   becomes the 'id' key in the response.
 * @todo Find out why the photos data isn't passed at all without file_entity
 *   module enabled. Is it because we're intercepting it too early in
 *   PubApiResourceController::objectLoad, so the data doesn't match the schema
 *   when passed to entity_metadata_wrapper() in
 *   PubApiResourceController::wrapper?
 */
function pubapi_restws_response_alter(&$response, $function, $formatName) {
  // We want to take over what file_entity does here, and not classify images as
  // resources.
  if (module_exists('file_entity')) {
    switch ($function) {
      case 'viewResource':
        foreach ($response as &$value) {
          pubapi_replace_file_entity_resource($value);
        }
        break;
      case 'queryResource':
        // This is an array of resources, under the 'list' key.
        foreach ($response['list'] as &$delta) {
          foreach ($delta as &$value) {
            pubapi_replace_file_entity_resource($value);
          }
        }
        break;
    }
  }
}

/**
 * Replaces a file_entity resource value with our custom controller-set value.
 *
 * @param mixed $value
 *   By reference. A resource key value. Here we only care if it's the result of
 *   a file field's referenced file_entity resource.
 *
 * @see pubapi_restws_response_alter()
 * @see PubApiResourceController::objectLoad
 */
function pubapi_replace_file_entity_resource(&$value) {
  // We want what we pass to the file_entity 'id' key to become the contents of
  // the key, and to slay the current siblings (resource, uri, and id). Loop to
  // find each response key that is a file_entity.
  if (is_array($value) && isset($value['resource']) && $value['resource'] === 'file') {
    $value = $value['id'];
  }
}

/**
 * Gets the API to Entity property map.
 *
 * @return array
 *   An associative array of info explaining how Drupal entities map to our API.
 *   Containing:
 *   - entity: The mapped entity type
 *   - bundle: The mapped bundle name
 *   - id: The entity ID key
 *   - ADDITIONAL PROPERTY INFO REQUIRED BY OUR API SCHEMA.
 */
function pubapi_get_map() {
  $map = array();
  foreach (pubapi_get_structure() as $resource => $info) {
    $map[$resource]['entity'] = variable_get("pubapi_ui_entity_type_{$resource}");
    $map[$resource]['bundle'] = variable_get("pubapi_ui_bundle_{$resource}");
    foreach (array_keys($info['properties']) as $property_name) {
      $map[$resource][$property_name] = variable_get("pubapi_ui_{$resource}_property_{$property_name}");
    }
  }
  return $map;
}

/**
 * Gets POC API schema info.
 *
 * @return array
 *   An associative array, containing:
 *   - label: The REST resource object label.
 *   - properties: See the return value of hook_entity_property_info()
 */
function pubapi_get_structure() {
  $structure = array();

  $structure['show'] = array(
    'label' => t('Show'),
    'properties' => array(
      'name' => array(
        'type' => 'text',
        'label' => t('Show name'),
      ),
      'id' => array(
        'type' => 'integer',
        'label' => t('Show ID'),
      ),
      'description' => array(
        'type' => 'text',
        'label' => t('Show description'),
        // @todo Consider refactoring to use entity_metadata_field_text_get().
      ),
      'genre' => array(
        'type' => 'text',
        'label' => t('Show genre'),
      ),
      'seasons' => array(
        'type' => 'integer',
        'label' => t("The show's seasons IDs"),
      ),
      'status' => array(
        'type' => 'integer',
        'label' => t('Show published status'),
      ),
    ),
  );

  $structure['season'] = array(
    'label' => t('Season'),
    'properties' => array(
      'name' => array(
        'type' => 'text',
        'label' => t('Season name'),
      ),
      'id' => array(
        'type' => 'integer',
        'label' => t('Season ID'),
      ),
      'description' => array(
        'type' => 'text',
        'label' => t('Season description'),
      ),
      'show' => array(
        'type' => 'integer',
        'label' => t("The season's show ID"),
      ),
      'episode' => array(
        'type' => 'integer',
        'label' => t("The season's episodes IDs"),
      ),
      'status' => array(
        'type' => 'integer',
        'label' => t('Season published status'),
      ),
    ),
  );

  $structure['episode'] = array(
    'label' => t('Episode'),
    'properties' => array(
      'name' => array(
        'type' => 'text',
        'label' => t('Episode name'),
      ),
      'id' => array(
        'type' => 'integer',
        'label' => t('Episode ID'),
      ),
      'description' => array(
        'type' => 'text',
        'label' => t('Episode description'),
      ),
      'show' => array(
        'type' => 'integer',
        'label' => t("The episode's show ID"),
      ),
      'season' => array(
        'type' => 'integer',
        'label' => t("The episode's season ID"),
      ),
      'status' => array(
        'type' => 'integer',
        'label' => t('Episode published status'),
      ),
    ),
  );

  $structure['blog'] = array(
    'label' => t('Blog'),
    'properties' => array(
      'name' => array(
        'type' => 'text',
        'label' => t('Blog name'),
      ),
      'id' => array(
        'type' => 'integer',
        'label' => t('Blog ID'),
      ),
      'description' => array(
        'type' => 'text',
        'label' => t('Blog description'),
      ),
      'show' => array(
        'type' => 'integer',
        'label' => t("The blog's show ID"),
      ),
      'season' => array(
        'type' => 'integer',
        'label' => t("The blog's season ID"),
      ),
      'episode' => array(
        'type' => 'integer',
        'label' => t("The blog's episode ID"),
      ),
      'status' => array(
        'type' => 'integer',
        'label' => t('Blog published status'),
      ),
    ),

    $structure['gallery'] = array(
      'label' => t('Gallery'),
      'properties' => array(
        'name' => array(
          'type' => 'text',
          'label' => t('Gallery name'),
        ),
        'id' => array(
          'type' => 'integer',
          'label' => t('Gallery ID'),
        ),
        'description' => array(
          'type' => 'text',
          'label' => t('Gallery description'),
        ),
        'photos' => array(
          'type' => 'file',
          'label' => t("The gallery's photos"),
          // @todo Refactor to use entity_metadata_field_file_get().
        ),
        'show' => array(
          'type' => 'integer',
          'label' => t("The gallery's show ID"),
        ),
        'season' => array(
          'type' => 'integer',
          'label' => t("The gallery's season ID"),
        ),
        'episode' => array(
          'type' => 'integer',
          'label' => t("The gallery's episode ID"),
        ),
        'status' => array(
          'type' => 'integer',
          'label' => t('Gallery published status'),
        ),
      ),
    ),
  );

  return $structure;
}
